<!DOCTYPE html>
<html lang="en">
<%-console.log(data.items)%>
<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" type="text/css" href="styles.css" />
    <title>Playlist Sorter</title>
</head>
<body>
<div class="container" style="justify-content: center">
    <H1>
        Sort your Playlists
    </H1>
    <h3>
        Drag the names of your playlists into different folders and give the folders a name. You can add as many folders as you like
    </h3>
    Total number of playlits: <%=data.items.length%>
    <br><br>
    <button id="playlistAdder">Add folder</button>
    <button type="submit" form="folders">Submit</button>
</div>
<div class="container" id="playlists">
    <form id="folders" method="POST" action="/loading" id="queryData" enctype='application/x-www-form-urlencoded'>
        <table class="table" id="playlistHolder">
            <tr style="display: flex;flex-wrap: wrap;">
                <%for (var j=0; j < data.items.length; j++) {%>
                        <td class="draggable" draggable="true"><%=data.items[j].name%></td>
                <%}%>
            </tr>
        </table>
        <table class="table">
            <tr id="row" style="display: flex;flex-wrap: wrap;"></tr>
        </table>
    </form>
</div>
</body>
</html>
<script>
    var i;

    function addRemove(element) {
        element.addEventListener("click", function () {
            var parent = event.target
            while (parent.className != 'nowrap') {
                console.log(parent.className)
                parent = parent.parentElement
            }
            var playlistHolder = document.getElementById("playlistHolder")
            var table = parent.getElementsByClassName('table dropable')[0]
            for (i = 0; i < table.rows.length; i++) {
                var col = playlistHolder.rows.item(0).insertCell(-1)
                col.innerHTML = table.rows.item(i).innerHTML
            }
            parent.parentElement.removeChild(parent)
        })
    }

    var removeButton = document.getElementsByClassName("remove")
    for (i = 0; i < removeButton.length; i++) {
        addRemove(removeButton[i]);
    }

    function addCollapseable(element) {
        element.addEventListener("click", function() {
            this.classList.toggle("active");
            var content = element.parentElement.getElementsByClassName('content')[0]
            if (content.style.maxHeight){
                content.style.maxHeight = null;
            } else {
                content.style.maxHeight = content.scrollHeight + "px";
            }
        });
    }
    var table = document.getElementsByClassName("collapsible");

    for (i = 0; i < table.length; i++) {
        addCollapseable(table[i]);
    }

    let dragged = null;

    function addDraggable(element) {
        element.addEventListener("dragstart", (event) => {
            // store a ref. on the dragged elem
            dragged = event.target;
        });
    }

    const source = document.getElementsByClassName("draggable");
    for (i = 0; i < source.length; i++) {
        addDraggable(source[i])
    }

    // dragover and drop event listener function
    function addDrop(element) {
        element.addEventListener("dragover", (event) => {
            // prevent default to allow drop
            event.preventDefault();
        });

        element.addEventListener("drop", (event) => {
            event.preventDefault();
            // move dragged element to the selected drop target
            if (dragged.parentNode.children.length == 1) {
                dragged.parentNode.parentNode.parentNode.parentNode.parentNode.removeChild(dragged.parentNode.parentNode.parentNode.parentNode);
            } else {
                dragged.parentNode.removeChild(dragged);
            }
            var parent = event.target
            while (parent.className != 'table dropable') {
                parent = parent.parentElement
            }
            var content = parent.parentElement
            if (parent.rows.item(0).innerHTML === "<th></th>") {
                parent.deleteRow(0)
            }
            var row = parent.insertRow(-1)
            row.className = 'draggable'
            row.draggable = true
            row.addEventListener("dragstart", (event) => {
                // store a ref. on the dragged elem
                dragged = event.target;
            });
            var col = row.insertCell(0)
            col.innerHTML = dragged.innerHTML
            //This allows the content to expand with new elements being added
            content.style.maxHeight = content.scrollHeight + "px";
        });
    }

    // add drop listener to all elements with table dropable class
    const target = document.getElementsByClassName("table dropable");
    for (i = 0; i < target.length; i++) {
        addDrop(target[i])
    }

    // add listener for playlist adder button
    var btn = document.getElementById('playlistAdder')
    btn.addEventListener("click", (event) => {
        var tr = document.getElementById('row')
        var td = document.createElement('td')
        td.className = "nowrap"
        var input = document.createElement('input')
        input.className = "input"
        input.form = "folders"
        input.type = "text"
        input.placeholder = "Playlist"
        input.required = true
        var btn  = document.createElement('button')
        btn.className = 'collapsible'
        btn.type = 'button'
        var rmvBtn = document.createElement('button')
        rmvBtn.className = 'remove'
        rmvBtn.type = 'button'
        rmvBtn.innerHTML = "Remove"
        addRemove(rmvBtn)
        var inner = document.createElement('div')
        inner.className = "content"
        var table = document.createElement('table')
        table.className = 'table dropable'
        table.innerHTML += '<tr class="draggable" draggable="true"><th></th></tr>'
        addCollapseable(btn)
        addDrop(table)
        inner.appendChild(table)
        td.append(input)
        td.append(btn)
        td.append(rmvBtn)
        td.appendChild(inner)
        tr.appendChild(td)

    })

</script>
</body>
</html>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css">